unit TestPhisicsControllerUnit;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit
  being tested.

}

interface

uses
  TestFramework, PhisicsControllerUnit, ControllersUnit,
  System.Generics.Collections, MenuUnit, MainUnit, Test1Unit, TestsUnit;

type
  // Test methods for class PhisicsController

  TestPhisicsController = class(TTestCase)
  strict private
    FPhisicsController: PhisicsController;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestgetListAnswer;
    procedure TestgetQuestCaption;
    procedure TestsetTest;
    procedure TestgetMenu;
    procedure TestgetQuest;
    procedure TestgetAnswer;
    procedure TestgetCorrect;
  end;

implementation

procedure TestPhisicsController.SetUp;
begin
  FPhisicsController := PhisicsController.Create;
end;

procedure TestPhisicsController.TearDown;
begin
  FPhisicsController.Free;
  FPhisicsController := nil;
end;

procedure TestPhisicsController.TestsetTest;
var
  caption: string;
  ReturnValue1: TList<string>;
  ReturnValue2: TList<string>;
begin
  FPhisicsController.setTest('Test2');
  caption := 'Test2';
  FPhisicsController.setTest(caption);
  CheckEquals(caption, 'Test2');
  ReturnValue1 := FPhisicsController.getQuest;
  CheckEquals(ReturnValue1.Items[0], 'ƒайте определение материальной точки.');
  CheckNotEquals(ReturnValue1.Items[0],
    ' ак определ€етс€ положение материальной точки?');
  ReturnValue2 := FPhisicsController.getQuest;
  CheckEquals(ReturnValue2.Items[1],
    ' ак определ€етс€ положение материальной точки?');
  CheckNotEquals(ReturnValue2.Items[1],
    'ƒайте определение материальной точки.');
  CheckNotEquals(ReturnValue1.Items[0], ReturnValue2.Items[1]);
end;

procedure TestPhisicsController.TestgetMenu;
var
  ReturnValue: TList<string>;
begin
  ReturnValue := FPhisicsController.getMenu;
  // TODO: Validate method results
  CheckEquals(ReturnValue.Items[0], 'Test2');
  CheckEquals(ReturnValue.Items[1], 'ƒвижение с  посто€нным ускорением');
  CheckEquals(ReturnValue.Count, 2);
end;

procedure TestPhisicsController.TestgetQuest;
var
  ReturnValue: TList<string>;
begin
  ReturnValue := FPhisicsController.getQuest;
  // TODO: Validate method results
end;

procedure TestPhisicsController.TestgetQuestCaption;
var
  ReturnValue: TList<string>;
begin
  FPhisicsController.setTest('Test2');
  ReturnValue := FPhisicsController.getQuest;
  CheckEquals(ReturnValue.Items[0], 'ƒайте определение материальной точки.');
  CheckNotEquals(ReturnValue.Items[0], '');
end;

procedure TestPhisicsController.TestgetAnswer;
var
  ReturnValue: TList<string>;
begin
  ReturnValue := FPhisicsController.getAnswer;
  // TODO: Validate method results
end;

procedure TestPhisicsController.TestgetCorrect;
var
  ReturnValue: TDictionary<integer, integer>;
begin
  ReturnValue := FPhisicsController.getCorrect;
  // TODO: Validate method results
end;

procedure TestPhisicsController.TestgetListAnswer;
var
  ReturnValue: TList<string>;
  // ReturnValue2: string;
begin
  FPhisicsController.setTest('Test2');
  // ReturnValue2 := FPhisicsController.getQuestCaption;
  ReturnValue := FPhisicsController.getAnswer;
  CheckEquals(ReturnValue.Items[0],
    'абстрактный объект (модель), не имеющий размаер, но обладающий другими характеристиками  ');
  CheckNotEquals(ReturnValue.Items[0], 'yyyyyyyyyyyyyyy');
  CheckEquals(ReturnValue.Items[1], '1');
  CheckNotEquals(ReturnValue.Items[1], 'nnnnnnnnnnnn');
  CheckEquals(ReturnValue.Count, 2);
  CheckNotEquals(ReturnValue.Count, 3);
end;

initialization

// Register any test cases with the test runner
RegisterTest(TestPhisicsController.Suite);

end.
